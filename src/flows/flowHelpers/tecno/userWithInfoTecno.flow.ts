import { addKeyword, EVENTS } from "@bot-whatsapp/bot";
import AIClass from "src/services/ai";
import { handleHistory } from "src/utils/handleHistory";
import { flowScheduleTechno } from "./scheduleTechno.flow";
import { startPrevious, reset, start, resetPrevious } from "src/utils/idleCustom";
import { delay } from "@bot-whatsapp/bot/dist/utils";
// import flowFinal from "./final.flow";
// import flowSmartTravel from "./smartTravel.flow";
// import flowInTheMiddle from "./middle.flow";


const flowUserWithInfoTecno = addKeyword(EVENTS.ACTION)
    .addAction(async (ctx, { flowDynamic, state, gotoFlow, extensions}) => {
        try {
            console.log("flowUserWithInfoTecno")
            const ai = extensions.ai as AIClass;
                const prompt = `Genera una pregunta casual y amigable para preguntar c√≥mo est√° un usuario.
                Reglas:
                - Debe ser una pregunta corta y directa
                - Usar un tono amistoso y cercano
                - No usar lenguaje formal
                - No usar saludos
                - No a√±adir contexto adicional
                - Puede incluir m√°ximo 2 emojis
                - La pregunta debe ser espec√≠ficamente sobre c√≥mo est√° el usuario

                Ejemplos del estilo deseado:
                "¬øC√≥mo est√°s? üòä"
                "¬øQu√© tal va tu d√≠a? üòÉ"
                "¬øC√≥mo te encuentras? üëã"

                Responde con una sola pregunta siguiendo este estilo.`;

            const response = await ai.createChat([
                {
                    role: 'system',
                    content: prompt
                }
            ]);
            const currentState = state.getMyState() || {};
            reset(ctx, gotoFlow, 360000)
            resetPrevious(ctx, 180000, flowDynamic, currentState.userName)
            console.log('flowUserWithInfoTecno');

            if (currentState && currentState.userName !== "") {
                await flowDynamic([
                    {
                        body: `Gracias por comunicarte con MotoSmart, la √∫nica app dise√±ada para motociclistas como tu üòéüõµ`,
                        delay: 2000
                    },
                    {
                        body: ` Hola ${currentState.userName}, Mi nombre es sofia y  voy a ser tu asesora asignada`,
                        delay: 2500
                    },
                    {
                        body: response,
                        delay: 1000
                    }

                ]);
            } else {
                return false;
            }
        } catch (error) {
            console.error('[ERROR in initial API check]:', error);
            await flowDynamic('Lo siento, hubo un error. Vamos a proceder con la captura de datos.');
            return true;
        }
    })
    .addAction({ capture: true},async (ctx, { flowDynamic, state, gotoFlow, extensions}) => {
        try {
            const currentState = state.getMyState() || {};
            reset(ctx, gotoFlow, 360000)
            resetPrevious(ctx, 180000, flowDynamic, currentState.userName)
            const body = ctx.body
            const ai = extensions.ai as AIClass;
                const prompt = `Toma esto "${body}" como contexto y responde de forma positiva.
                Instrucciones:
                - No usar saludos ni nombres
                - No hacer preguntas
                - Responder como si fuera un amigo cercano hablando informalmente
                - La respuesta debe ser una afirmaci√≥n o comentario cerrado
                - Mantener un tono positivo

                Ejemplos:
                "¬°Genial que est√©s teniendo un d√≠a genial!"
                "¬°Qu√© bueno escuchar eso!"
                "¬°Me alegra saberlo!"`;

            const response = await ai.createChat([
                {
                    role: 'system',
                    content: prompt
                }
            ]);

            await flowDynamic([
                {
                    body: response,
                    delay: 2000
                },
                {
                    body: "Genial, quiero contarte los beneficios que tienes por sacar la revision tecnico mecanica con uno de nuestros aliadosüòéüõµ",
                    delay: 2000
                }
            ]);
            
        } catch (error) {
            console.error('[ERROR in initial API check]:', error);
            await flowDynamic('Lo siento, hubo un error. Vamos a proceder con la captura de datos.');
            return true;
        }
    })
    .addAction( async (ctx, { flowDynamic, state, extensions, gotoFlow}) => {
            try {
                const currentState = state.getMyState() || {};
                reset(ctx, gotoFlow, 360000)
                resetPrevious(ctx, 180000, flowDynamic, currentState.userName)

                if (currentState && currentState.userName !== "") {
                    await flowDynamic([
                        {
                            body: `No 1. Cargaremos *5Ô∏è‚É£0Ô∏è‚É£0Ô∏è‚É£0Ô∏è‚É£ MotoPuntos* a tu perfil para que los cambies por obsequios en cualquiera de nuestras marcas aliadas üéÅ`,
                            delay: 5000
                        },
                        {
                            body: `No 2. Puedes agendar una cita preferencial en nuestro CDA aliado, de esta manera no tendr√°s que hacer filas y menos demora tendr√°s ü§ü`,
                            delay: 5000
                        }
                    ]);
                    if (currentState.is_premium){
                        await flowDynamic([
                            {
                                body: 'No 3. Lo mejor de todo es que recibir√°s un *bono de descuento de $25.000* pesosü§ë por ser un usuario MotoSmart premium activo. El valor de la revisi√≥n t√©cnico-mec√°nica para el a√±o 2025 qued√≥ en $207.700. Con el bono de descuento entregado por MotoSmart, solo pagas $182.700.',
                                delay: 5000
                            }
                        ])
                    }
                    else {
                        await flowDynamic([
                            {
                                body: 'No 3. Lo mejor de todo es que recibir√°s un bono de descuento de $15.000 pesosü§ë por hacer parte de la comunidad MotoSmart. El valor de la revisi√≥n t√©cnico-mec√°nica para el a√±o 2025 qued√≥ en $207.700. Con el bono de descuento entregado por MotoSmart, solo pagas $192.700.',
                                delay: 5000
                            }
                        ])
                    }
                    
                    await flowDynamic(`${currentState.userName}, ¬øque te parecen estos beneficios por hacer parte de la comunidad MotoSmart?`);
                } else {
                    return false;
                }
                } catch (error) {
                    console.error('Error en el proceso de registro:', error);
                    await flowDynamic([
                    {
                        body: 'Lo siento, ha ocurrido un error. Por favor, intenta nuevamente.',
                        delay: 1000
                    }
                ]);
            }
        }
    )
    .addAction({capture: true}, async (ctx, { flowDynamic, state, gotoFlow, extensions}) => {
        try {
            const currentState = state.getMyState() || {};
            reset(ctx, gotoFlow, 360000)
            resetPrevious(ctx, 180000, flowDynamic, currentState.userName)
            const body = ctx.body
            const ai = extensions.ai as AIClass;
                const prompt = `Toma esto "${body}" como contexto y responde a la pregunta: "¬øQu√© te parecen estos beneficios por hacer parte de la comunidad MotoSmart?". 
                Instrucciones:
                - No usar saludos ni nombres
                - No hacer preguntas
                - Responder como si fuera un amigo cercano hablando informalmente
                - La respuesta debe ser una afirmaci√≥n o comentario cerrado
                - Mantener un tono positivo

                Ejemplos:
                "¬°Genial que te gusten los beneficios!"
                "¬°Qu√© bueno que te parezcan √∫tiles!"
                "¬°Me alegra saber que te gustan!"`;

            const response = await ai.createChat([
                {
                    role: 'system',
                    content: prompt
                }
            ]);

            await flowDynamic([
                {
                    body: response,
                    delay: 2000
                },
                {
                    body: "por favor dime ¬øen que ciudad tienes pensado llevar tu moto a la revision tecnicomecanica?, comprobare si tenemos disponibilidad ahi üòé",
                    delay: 2000
                }
            ]);
            
        } catch (error) {
            console.error('[ERROR in initial API check]:', error);
            await flowDynamic('Lo siento, hubo un error. Vamos a proceder con la captura de datos.');
            return true;
        }
    })
    .addAction( { capture: true}, async (ctx, { flowDynamic, state, extensions, gotoFlow}) => {
                try {
                    reset(ctx, gotoFlow, 90000)
                    const currentState = state.getMyState();
                    const userMessage = ctx.body
                    resetPrevious(ctx, 25000, flowDynamic, currentState.userName)
                    console.log(userMessage)
                    const ai = extensions.ai as AIClass;
                    const prompt = `Analiza la respuesta: ${userMessage} considerando que responde a la pregunta: '¬øDe qu√© ciudad o pueblo de Colombia me est√° hablando?' y que se refiere a ciudades o pueblos colombianos.

                    Si la respuesta menciona directamente una de las ciudades donde tenemos sucursales CDA (Bogot√°, Medell√≠n, Cali), responde indicando que tenemos una sucursal en esa ciudad.
                    Si la respuesta menciona otra ciudad o pueblo diferente:
                    Calcula cu√°l es la sucursal m√°s cercana entre Bogot√°, Medell√≠n y Cali.
                    Proporciona la distancia aproximada (en kil√≥metros) desde esa ciudad/pueblo a nuestra sucursal m√°s cercana.
                    Responde de manera clara, mencionando que aunque no tenemos una sucursal en esa ciudad, indicamos la m√°s cercana y la distancia.
                    Responde en un tono amable, breve y profesional.
                    Si no puedes interpretar la ubicaci√≥n, responde con una lista clara de las sucursales disponibles:

                    Ejemplo: "No estoy segura de la ciudad que mencionas, pero nuestras sucursales est√°n en Bogot√°, Medell√≠n y Cali.", siempre ten encuenta la ciudad que se menciona aqui: "${userMessage}", siempre ten encuenta el contexto de ${userMessage}, ya que es la ciudad que el usuario menciono.
                    Si concluyes que la ciudad es cali responde lo siguiente "Muy bien, en Cali tenemos al aliado la sucursal ubicado en la carrera 70 # 2c-32. 

                    Puedes llegar con la ubicaci√≥n por Google Maps: üëáüëá
                    [https://maps.app.goo.gl/5BA51ZbnyvG3RwZZ9](https://maps.app.goo.gl/5BA51ZbnyvG3RwZZ9). 

                    Recuerda exigirle al aliado que escanee tu c√≥digo QR para que puedas recibir el descuento de $${currentState.is_premium ? "25.000" : "15000"} pesos y sumar 5000 MotoPuntos de obsequio por usar nuestras alianzas.

                    Nuestro aliado tiene atenci√≥n de 8am a 5pm de lunes a s√°bado" `;

                    const response = await ai.createChat([
                        {
                            role: 'system',
                            content: prompt
                        }
                    ]);
                    flowDynamic([
                        {   body: response,
                            delay: 2000
                        },
                        {
                            body: "¬øTe gustar√≠a agendar una cita con nuestro aliado?",
                            delay: 2000
                        }
                    ])
                    
                } catch (error) {
                    console.error('Error en el proceso de registro:', error);
                    await flowDynamic([
                        {
                            body: 'Lo siento, ha ocurrido un error. Por favor, intenta nuevamente.',
                            delay: 1000
                        }
                    ]);
                }
            }
    )
    .addAction( { capture:true }, async (ctx, { flowDynamic, state, extensions, gotoFlow}) => {
                try {
                    const currentState = state.getMyState() || {};
                    reset(ctx, gotoFlow, 360000)
                    resetPrevious(ctx, 180000, flowDynamic, currentState.userName)
                    const userMessage = ctx.body.toLowerCase();
                    const ai = extensions.ai as AIClass;
                    const prompt = `Analiza la respuesta del usuario: "${userMessage}" considerando que responde a la pregunta: "¬øTe gustar√≠a agendar una cita con nuestro aliado?"
                    Instrucciones estrictas:
                    - Si la respuesta contiene CUALQUIERA de estas palabras clave, devuelve OBLIGATORIAMENTE true:
                    * s√≠
                    * claro
                    * ok
                    * correcto
                    * genial
                    * bueno
                    * perfecto
                    * entendido
                    * de acuerdo
                    * est√° bien
                    * correcto

                    - Analiza el sentido general de la respuesta
                    - Si la respuesta es afirmativa o muestra disposici√≥n positiva, devuelve true
                    - Si la respuesta es negativa o muestra dudas, devuelve false
                    
                    Si la respuesta es sobre agendar o algo relacionado positivamnete, responde con "true".
                    Si la respuesta es negativa o no relevante, responde con "false".
                    Devuelve √∫nicamente "true" o "false" sin "explicaciones adicionales`;

                    const response = await ai.createChat([
                        {
                            role: 'system',
                            content: prompt
                        }
                    ]);

                    const isPositive = response.trim() === 'true';
                    console.log(response);
                    console.log(isPositive === true)
                    if (isPositive === true) {
                        console.log("agendar")
                        state.update({
                            scheduleTechno: true
                        });
                        await handleHistory({ content: userMessage, role: 'user' }, state)
                        gotoFlow(flowScheduleTechno)
                    } else {
                        await flowDynamic([
                            {
                                body: '¬°Muy bien!',
                                delay: 2000 
                            },
                            {
                                body: 'Gracias por comunicarte con MotoSmart ü§úü§õ.\n\Se un motociclista ejemplar, queremos que siempre regreses a casa üõµü§üüòé',
                                delay: 2500 
                            }
                        ]);
                        state.update({ 
                            flag: false,
                            scheduleTechno: false
                        });
                    }
                } catch (error) {
                    console.error('Error en el proceso de registro:', error);
                    await flowDynamic([
                        {
                            body: 'Lo siento, ha ocurrido un error. Por favor, intenta nuevamente.',
                            delay: 1000
                        }
                    ]);
                }
            }
        );

export default flowUserWithInfoTecno