import { addKeyword, EVENTS } from "@bot-whatsapp/bot";
import AIClass from "../../../services/ai";
import { getHistoryParse, handleHistory } from "../../../utils/handleHistory";
import { generateTimer } from "../../../utils/generateTimer";
import { getCurrentCalendar } from "../../../services/calendar";
import { getFullCurrentDate } from "src/utils/currentDate";
import { reset, resetPrevious } from "src/utils/idleCustom";

const generateSchedulePrompt = (schedule: string, history: string, suggestedTimes: string[]) => {
    const currentDay = getFullCurrentDate();
    return `Como ingeniero de inteligencia artificial especializado en la programaciÃ³n de reuniones, tu objetivo es analizar la conversaciÃ³n, determinar la intenciÃ³n del cliente y gestionar su preferencia de fecha y hora para programar una cita. La cita durarÃ¡ aproximadamente 15 minutos y solo puede ser programada entre las 9am y las 4pm, de lunes a viernes, y solo para la semana en curso entre los horarios establecidos.
    Datos proporcionados:
    - Fecha de hoy: ${currentDay}
    - Reuniones ya agendadas:
    -----------------------------------
    ${schedule}
    - Horarios ya sugeridos:
    -----------------------------------
    ${suggestedTimes.join(", ") || "ninguno"}
    - Historial de conversaciÃ³n:
    -----------------------------------
    ${history}
    Reglas estrictas para generar respuestas:
    1. NO saludes ni uses frases introductorias.
    2. pregunta en que horario le sirve al usuario..
    3. Si el cliente sugiere un horario que ya estÃ¡ ocupado, responde indicando que el horario estÃ¡ ocupado y sugiere un horario alternativo disponible.
    4. Si el cliente indica que no puede asistir en un dÃ­a especÃ­fico, pregunta por otra fecha u hora dentro del rango permitido (9am-4pm, lunes-viernes, semana en curso).
    5. Si no hay mÃ¡s disponibilidad en la semana, informa al cliente que no hay horarios disponibles y ofrece alternativas generales (por ejemplo, "Â¿Te gustarÃ­a que te contactÃ¡ramos la prÃ³xima semana?").
    6. AsegÃºrate de verificar la agenda antes de confirmar cualquier cita.
    7. Respuestas cortas y claras, ideales para enviar por WhatsApp, con emojis para mantener un tono amigable.
    8. Revisa el historial de conversaciÃ³n y la agenda actual (${schedule}) para calcular el dÃ­a, fecha y hora que no tenga conflicto con otra hora ya agendada, tomando en cuenta la fecha del dÃ­a de hoy (${currentDay}).
    9. Evita sugerir horarios que ya fueron mencionados en esta conversaciÃ³n (${suggestedTimes.join(", ") || "ninguno"}).

    Ejemplos de respuestas adecuadas:
    - "Por supuesto, tengo un espacio disponible maÃ±ana, Â¿a quÃ© hora te resulta mÃ¡s conveniente? ðŸ˜Š"
    - "SÃ­, tengo un espacio disponible hoy, Â¿a quÃ© hora te resulta mÃ¡s conveniente? ðŸ•’"
    - "Lo siento, ese horario ya estÃ¡ reservado. Â¿Te parece bien otro horario? ðŸ˜Š"
    - "Entiendo, si no puedes ese dÃ­a, Â¿quÃ© otro dÃ­a te resulta conveniente esta semana? ðŸ“…"
    - "No hay mÃ¡s disponibilidad esta semana. Â¿Te gustarÃ­a que te contactÃ¡ramos la prÃ³xima semana? ðŸ™Œ"

    Nota Importante:
    - Solo devuelve una respuesta Ãºtil y directa, sin texto adicional ni explicaciones innecesarias.
    - siempre revisa el ${schedule} antes de sugerir una hora para la cita.
    IMPRESCINDIBLE:
    - si el usuario propone una hora fuera de la hora de atncion que es de 9am a 4pm, informale que solo se atiende en ese horario.`;
};

/**
 * Hable sobre todo lo referente a agendar citas, revisar historial saber si existe huecos disponibles
 */
const flowScheduleTechno = addKeyword(EVENTS.ACTION).addAction(async (ctx, { extensions, state, flowDynamic, gotoFlow }) => {
    try {
        console.log('flowScheduleTechno');
        const currentState = state.getMyState() || {};
        console.log(currentState);
        reset(ctx, gotoFlow, 360000);
        resetPrevious(ctx, 180000, flowDynamic, currentState.userName);

        if (currentState.birthday === true) {
            return console.log("no sigue el flujo");
        }

        await flowDynamic('dame un momento para consultar la agenda...');
        const ai = extensions.ai as AIClass;
        const history = getHistoryParse(state);
        const list = await getCurrentCalendar();
        const suggestedTimes = currentState.suggestedTimes || [];

        // Generar el prompt con el historial y los horarios ya sugeridos
        const promptSchedule = generateSchedulePrompt(list?.length ? list : 'ninguna', history, suggestedTimes);
        console.log(promptSchedule);

        // Enviar el prompt al modelo de IA
        const text = await ai.createChat([
            {
                role: 'system',
                content: promptSchedule,
            },
            {
                role: 'user',
                content: `Cliente pregunta: ${ctx.body}`,
            },
        ], 'qwen-max');

        console.log('Respuesta del modelo:', text);

        // Guardar la respuesta en el historial
        await handleHistory({ content: text, role: 'assistant' }, state);

        // Actualizar el estado con los horarios sugeridos
        const newSuggestedTimes = [...suggestedTimes, ...extractSuggestedTimes(text)];
        state.update({
            scheduleTechno: true,
            suggestedTimes: newSuggestedTimes,
        });

        // Dividir la respuesta en chunks y enviarla al usuario
        const chunks = text.split(/(?<!\d)\.\s+/g);
        for (const chunk of chunks) {
            await flowDynamic([{ body: chunk.trim(), delay: generateTimer(150, 250) }]);
        }
    } catch (error) {
        console.error('Error in flowSchedule:', error);
    }
});

// FunciÃ³n para extraer los horarios sugeridos de la respuesta del modelo
function extractSuggestedTimes(response: string): string[] {
    const timeRegex = /\b(?:lunes|martes|miÃ©rcoles|jueves|viernes)\s+a\s+las\s+\d{1,2}:\d{2}\s+(AM|PM)\b/gi;
    const matches = response.match(timeRegex);
    return matches || [];
}

export { flowScheduleTechno };